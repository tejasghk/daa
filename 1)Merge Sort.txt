#include <stdio.h> 
#include <stdlib.h> 
#include <time.h> 
#define MAX 1000 
int count; 
void merge(int a[MAX], int low, int mid, int high) 
{ 
    int i, j, k, b[MAX]; 
    i = low; 
    j = mid + 1; 
    k = low; 
    while (i <= mid && j <= high) 
    { 
        if (a[i] < a[j]) 
        { 
            b[k++] = a[i++]; 
        } 
        else 
        { 
            b[k++] = a[j++]; 
        } 
        count++; 
    } 
    while (i <= mid) 
    { 
        b[k++] = a[i++]; 
        count++; 
    } 
    while (j <= high) 
    { 
        b[k++] = a[j++]; 
        count++; 
    } 
    for (i = low; i <= high; i++) 
    { 
        a[i] = b[i]; 
    } 
} 
void mergesort(int a[MAX], int low, int high) 
{ 
    int mid; 
    if (low < high) 
    { 
        mid = (low + high) / 2; 
        mergesort(a, low, mid); 
        mergesort(a, mid + 1, high); 
        merge(a, low, mid, high); 
    } 
} 
int main() 
{ 
    int i, j, n, a[MAX], b[MAX], c[MAX]; 
    int c1, c2, c3; 
    printf("\nEnter n: "); 
    scanf("%d", &n); 
    printf("\nEnter elements: "); 
    for (i = 0; i < n; i++) 
    { 
        scanf("%d", &a[i]); 
    } 
    count = 0; 
    mergesort(a, 0, n - 1); 
    printf("\nSorted elements: \n"); 
    for (i = 0; i < n; i++) 
    { 
        printf("%d\n", a[i]); 
    } 
    printf("\nNumber of counts: %d\n", count); 
    printf("\nSIZE\tASC\tDESC\tRAND\n"); 
    srand(time(NULL)); 
    for (i = 16; i < 550; i = i * 2) 
    { 
        for (j = 0; j < i; j++) 
        { 
            a[j] = j;        // Ascending order 
            b[j] = i - j;    // Descending order 
            c[j] = rand() % i; // Random order 
        } 
        count = 0; 
        mergesort(a, 0, i - 1); 
        c1 = count; 
        count = 0; 
        mergesort(b, 0, i - 1); 
        c2 = count; 
        count = 0; 
        mergesort(c, 0, i - 1); 
        c3 = count; 
        printf("\n%d\t%d\t%d\t%d", i, c1, c2, c3); 
    } 
    return 0; 
} 
