#include <stdio.h> 
#include <stdlib.h> 
#include <time.h> 
#define MAX 1000 
int count; 
void merge(int a[MAX], int low, int mid, int high) 
{ 
    int i, j, k, b[MAX]; 
    i = low; 
    j = mid+1; 
    k = low; 
    while (i <= mid && j <= high) 
    { 
        if (a[i] < a[j]) 
        { 
            b[k++] = a[i++]; 
        } 
        else 
        { 
            b[k++] = a[j++]; 
        } 
        count++; 
    } 
    while (i <= mid) 
    { 
        b[k++] = a[i++]; 
        count++; 
    } 
    while (j <= high) 
    { 
        b[k++] = a[j++]; 
        count++; 
    } 
    for (i = low; i <= high; i++) 
    { 
        a[i] = b[i]; 
    } 
} 
void mergesort(int a[MAX], int low, int high) 
{ 
    int mid; 
    if (low < high) 
    { 
        mid = (low + high) / 2; 
        mergesort(a, low, mid); 
        mergesort(a, mid + 1, high); 
        merge(a, low, mid, high); 
    } 
} 
int presort(int n, int a[MAX]) 
{ 
    mergesort(a, 0, n - 1); 
    int i; 
    for (i = 0; i <= n - 2; i++) 
    { 
        if (a[i] == a[i + 1]) 
            return 1; 
    } 
    return 0; 
} 
int main() 
{ 
    int i, n, a[MAX]; 
    printf("\n Enter n: "); 
    scanf("%d", &n); 
    printf("\nEnter elements: "); 
    for (i = 0; i < n; i++) 
    { 
        scanf("%d", &a[i]); 
    } 
    int x; 
    x = presort(n, a); 
    if(x==0) 
    { 
        printf("Unique!\n"); 
    } 
    if(x==1) 
    { 
        printf("Not Unique!\n"); 
    } 
    count = 0; 
    clock_t start, end; 
    double cpu; 
    start = clock(); 
    mergesort(a,0,n-1); 
    end = clock(); 
    cpu = ((double) (end - start)) / CLOCKS_PER_SEC; 
    printf("Time taken: %f sec", cpu); 
    printf("\nSorted elements: \n"); 
    for (i = 0; i < n; i++) 
    { 
        printf("%d\n", a[i]); 
    } 
    printf("\nNumber of counts: %d\n", count); 
} 